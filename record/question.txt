2017/07/18
关于ReactNative接入到原生应用中出现的一些问题
1. compileSdkVersion 23最好是23，在26上会出现一些问题，且很难解决。高版本的AndroidStudio编译器默认的编译版本为26，而且还换不了23，
换完之后会报各种错，很烦！所以还是用低版本的集成开发环境吧！
2.compile 'com.android.support:appcompat-v7:23.0.1'这个一定要写对，如果写23.0.3或者等等也会出现问题
3. maven {
            // All of React Native (JS, Android binaries) is installed from npm
            url "$rootDir/node_modules/react-native/android"
        }
这边的路径要写对，这边的意思是去找这个库，之前我写错了。所以会报错
4.package.json中 
    "react": "^16.0.0-alpha.12",
    "react-native": "0.45.0"
这边要写成这样，如果这边写的不是这样，需要重新安装。先去工程目录下删除node_modules这个文件夹，然后将package.json中改成上面的样子。然后在终端
（Terminal）中输入npm install 或者不删除 直接改过之后 npm update
5.
    AppRegistry.registerComponent('reactttt', () => HelloWorld);
    "name": "reactttt",
    mReactRootView.startReactApplication(mReactInstanceManager, "reactttt", null);
    这三处需要一致

    补： 然而好像不一致也行

6.
    E/unknown:React: Unable to download JS bundle  
    E/unknown:React: java.net.ConnectException: failed to connect to localhost/127.0.0.1 (port 8081) after 5000ms: isConnected failed: ECONNREFUSED (Connection refused)  
    E/unknown:React:     at libcore.io.IoBridge.isConnected(IoBridge.java:223)  
    E/unknown:React:     at libcore.io.IoBridge.connectErrno(IoBridge.java:161)  
    E/unknown:React:     at libcore.io.IoBridge.connect(IoBridge.java:112)  
    ...
    E/unknown:React:  Caused by: libcore.io.ErrnoException: isConnected failed: ECONNREFUSED (Connection refused)  
    E/unknown:React:     at libcore.io.IoBridge.isConnected(IoBridge.java:208)  
    E/unknown:React:     at libcore.io.IoBridge.connectErrno(IoBridge.java:161)  
    E/unknown:React:     at libcore.io.IoBridge.connect(IoBridge.java:112)  
    E/unknown:React:     at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:192)  
    E/unknown:React:     at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:460)  
    E/unknown:React:     at java.net.Socket.connect(Socket.java:833)  


7. 加载JSBundle失败 
    adb reverse tcp:8081 tcp:8081


    View 写的时候需要注意是大写开头的<View></View>而不是<view></view>

2017/07/25
    p.s:state属性,主要用来存储组件自身需要的数据,每次数据的更新都是通过修改state属性的值,rn内部会监听state属性,一旦变化即会触发render方法更新dom
    # Create a new React Native App
    react-native init SimpleApp
    cd SimpleApp

    # Install the latest version of react-navigation from npm
    npm install --save react-navigation

    # Run the new app
    react-native run-android # or:
    react-native run-ios




bundling failed: "Unable to resolve module `../../widget` from `C:\\Users\\yuerwang\\Desktop\\mywork\\Test\\PO\\src\\scene\\Home\\HomeScene.js`: could not re
solve `C:\\Users\\yuerwang\\Desktop\\mywork\\Test\\PO\\src\\widget' as a folder: it did not contain a package, nor an index file"







1.！！！！！路径写成这样会报错 icon_navigationItem_message_white@2x.png 必须要去掉后面的@符号，但是开源的代码中这样写是可以的（可能他是在MAC上写的）
报的错是无法找到这个文件夹，很奇怪

    报的错是
    bundling failed: "Unable to resolve module `./img/tabbar/pfb_tabbar_homepage@2x.png` from `C:\\Users\\yuerwang\\Desktop\\mywork\\Test\\PO\\src\\R
    ootScene.js`: could not resolve `C:\\Users\\yuerwang\\Desktop\\mywork\\Test\\PO\\src\\img\\tabbar\\pfb_tabbar_homepage@2x.png' as a folder: it did not c
    ontain a package, nor an index file"

2. import { color,  NavigationItem } from '../../widget'也是报错，报的错也是找不到文件夹，必须拆开写成这样

    import NavigationItem from '../../widget/NavigationItem'
    import color from '../../widget/color'
    开源的代码上面的写法是可以的，不知道具体上面原因

3.导入函数应该用{}包起来，import {Paragraph} from '../../widget/Text'

4.关于import export 的解释http://es6.ruanyifeng.com/#docs/module#export

5.const声明的变量只在当前代码块中有效

6.注意 PropTypes的大小写问题

    currentIndicatorStyle: View.propTypes.style,
    onPageIndicatorPress: React.PropTypes.func

7.判断一个组件是否加载
    let icon = this.props.icon &&
    <Image style={[styles.icon, this.props.iconStyle]}  source={this.props.icon}/>

subtitle: `[${info.range}]${info.title}`,

8. 版本需要注意的问题
    java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0
    这个原因是JDK版本错误，需要升级版本

9.导工程的时候注意npm install 及 ADROID_HOME(即SDK)的设置

10. 查看端口号及杀进程
    netstat -ano|findstr "8081"
    taskkill /pid 9380 -f

11. Unable to load script from assets 'index.android.bundle'.Make sure your bundle is packaged
    correctly or you're running a packager server.

    Answer:
    1.(in project directory) mkdir android/app/src/main/assets
    2.react-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res
    3.react-native run-android
12.为什么下面这种加载不出来图片？？？？？？！！！！！！！！
            <TouchableOpacity style={styles.container}>
                    {icon}
                    {leftText}
            </TouchableOpacity>

            <TouchableOpacity >
                <View style={styles.container}>
                    {icon}
                    {leftText}
                </View>
                
            </TouchableOpacity>
    不知道原因，但是以后写父控件的时候一定要注意给父控件样式

13.拼写错误！！！！！！！！！！
    在这个问题上栽了很多次，个人感觉出现这个问题的原因是
        1.JavaScript的语言特性（弱类型）
        2.集成开发环境没有检查错误的功能 
        3.也是最主要的原因，个人没有注意检查

13.push错误

        for(let i=0; i<bannerList.length; i++){
            bannerCells.push(<Image source={{ uri: bannerList[i].img }} style={styles.banner} key={i}/>)
        }
        // bannerCells.push(bannerList.map((info) => {
        //     return
        //     <Image source={{ uri: info.img }} style={styles.banner} key={info.img}/>

        // }));
    上面的正常，下面的不行，暂时不知道原因
    现在知道了,bannerList.map()出来的已经是一个数组了，你再去push那肯定是不对的！！！
    你可以直接bannerCells = bannerList.map((info) => {
        return <Image source={{uri: info,img}} style={styles.banner} key={info.img}/>
    })

14.有时候运行会出现Object Undefined 
   
   出现这个问题的原因一般是因为没有使用 bind(this)

15.RN WebView返回最后一层页面时出现 about:blank

    这里一般出现的原因是因为

    <WebView
        ref={WEBVIEW_REF}
        source={this.state.source}
        style={styles.webView}
        onLoadEnd={(e) => this.onLoadEnd(e)}
        onNavigationStateChange={this.onNavigationChange.bind(this)}
        domStorageEnabled={true}/>

    原因： 在设置初始state的时候默认写了 state={source: {}}，而且在第一次render的时候还没有设置正确的source，
    这样就造成了WebView直接去加载一个空页面即上文提到的(about: blank)，而后在设置正确的source（我是在componentDidMount()中设置的）
    WebView又一次加载新页面，即在进入这个页面后其实是加载了两次，所以返回的时候会显示about: blank页面。

    解决方法：避免加载source: {}， 必须在render()方法之前把正确的source设置好，查看React生命周期 constructor() 及 componentWillMount()
    在render() 方法之前执行。我选择在constructor中设置好正确的source。

    调试、运行：发现问题已经解决

    补：发现了一种更好的解决方案

     let contentView=this.state.show && <WebView
                    ref={WEBVIEW_REF}
                    source={this.state.source}
                    style={styles.webView}
                    onLoadEnd={(e) => this.onLoadEnd(e)}
                    onNavigationStateChange={this.onNavigationChange.bind(this)}
                    domStorageEnabled={true}
                />
        return (
            <View style={styles.container}>
                {contentView}
            </View>
        )

    利用JavaScript的语言特性，这样就可以完美解决上面的问题，当正确赋值的时候，设置{show: true}即可

16.为什么应用没有加载出正确的页面
    因为你傻，npm start要在正确的目录下，如果加载不出来看看是不是启动的目录错了！！


17.关于在WebActivity中时，返回键出现直接退出整个页面的，之后再点击直接崩溃的解决方案

public class WebActivity extends AppCompatActivity implements DefaultHardwareBackBtnHandler {
    private ReactRootView mReactRootView;
    private ReactInstanceManager mReactInstanceManager;

    @Override
    protected void onCreate(@android.support.annotation.Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mReactRootView = new ReactRootView(this);
        mReactInstanceManager = ((ReactApplication)getApplication()).getReactNativeHost().getReactInstanceManager();
        mReactRootView.startReactApplication(mReactInstanceManager, "WebScene", null);
        setContentView(mReactRootView);
    }


    @Override
    public void invokeDefaultOnBackPressed() {

    }


    @Override
    public void onPause() {
        super.onPause();

        if (mReactInstanceManager != null) {
            mReactInstanceManager.onHostPause(this);
        }
    }

    @Override
    public void onResume() {
        super.onResume();

        if (mReactInstanceManager != null) {
            mReactInstanceManager.onHostResume(this, this);
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (mReactInstanceManager != null) {
            mReactInstanceManager.onHostDestroy();
        }
    }
}
    源代码如下
    这个原因肯能是因为没有捕捉返回键事件的原因，这里修改代码为这样就解决了这个问题


    public class WebActivity extends ReactFragmentActivity {
        @Override
        protected String getMainComponentName() {
            return "WebScene";
        }
    }

    而且下面还很简洁，下面这种写法才是正确的写法，但是上面的那种写法也有它特定的适用场景，
    比如业务需要在一个原生的Activity或Fragment页面中嵌入React Native的页面，那么这时就需要用到
    ReactRootView了，这时也应该需要注意一下返回键，但是应该没什么大问题，因为返回键事件此时需要
    原生的界面来处理了，与React Native页面无关

18.React Native 与 原生通信需要注意的地方
    注意ReactInstanceManager实例化的差别，看ReactActivity的实现源码，你就会发现问题（主要是ReactInstanceManager的实例化差别）

19.AppRegistry可以注册多个组件


20.很重要的小技巧

    React Native 的状态刷新是由状态机来控制的，这是很好的，但是我现在遇到了问题
    我在做一个类似于RadioButton的过程中
    先讲下我的设计思路：
        用FlatList来作为RadioGroup，用View来作为RadioButton。先在将这个大组件分为两个模块，即FlatList和Cell两个模块。
        在RadioGroup中由state保存各个RadioButton的状态及属性（text, clicked）。当点击一个RadioButton的时候将此RadioButton
        的clicked设为true,其余的RadioButton设置为clicked=false。然后通知RadioGroup刷新所有子RadioButton。此时问题来了！！
        你会发现即使重新设置RadioGroup中this.setState({items: data})，根本不刷新。什么鬼！！仔细想一想，RN的状态机判断数据
        是否发生变化的依据可能是根据变量的地址值（这里做一下猜测，根据的数组中的每一个元素的地址），虽然你改变item的clicked,但是
        并没有改变item在内存中的地址。好家伙，还有这样的操作！！（坑否？）那么解决的思路就有了，要改变地址是吧？那就来吧。

        var data = this.state.items.map((info) =>{
            return {
                title: info.title,
                clicked: info.clicked,
            }
        })

        来，再试一下，我草居然成功了。可能猜测还真的是对的，具体到底猜测的对不对，等有时间了再去研究吧！


        贴一下源码吧，省的以后忘了


        补： 
            FlatList中有一个extraData()可以完美解决上面的问题

            A marker property for telling the list to re-render (since it implements PureComponent). 
            If any of your renderItem, Header, Footer, etc. functions depend on anything outside of the data prop,
            stick it here and treat it immutably.

            这是用来通知list去重新刷新的，这里这个函数可以很好的解决上面的问题。只需要去设置这个属性，它会比较前后的值是否一样，
            不一样就去刷新。

    // resetAllItemState(item){
    //     var position = this.state.items.indexOf(item);
    //     if(position === this.state.lastClicked){
    //         return;
    //     }
    //     var data = this.state.items.map((info)=>{
    //         return{
    //             title: info.title,
    //             clicked: info.clicked,
    //         }
    //     });

    //     for(let v of data){
    //         v.clicked = false;
    //     }
    //     data[position].clicked = true;
    //     this.setState({
    //         items: data,
    //         lastClicked: position,
    //     })

    //     this.props.onPress(item);
    // }
        
class LeftItemsComponent extends PureComponent{

    constructor(props){
        super(props)
        this.state={
            items: [],
        }
    }

    onPress(item){
        this.resetAllItemState(item);
        this.props.onPress(item);
    }

    resetAllItemState(item){
        var position = this.state.items.indexOf(item);
        var data = this.state.items.map((info)=>{
            return{
                title: info.title,
                clicked: info.clicked,
            }
        });

        for(let v of data){
            v.clicked = false;
        }
        data[position].clicked = true;
        this.setState({
            items: data,
        })
    }

    componentWillReceiveProps(nextProps){
        var items = nextProps.items;
        if(items){
            this.setState({
                items: items,
            })
        }
    }

    keyExtractor(item, index){
        // alert('index='+index)
        return index;
    }

    render(){
        return (
            <FlatList
                data={this.state.items}
                keyExtractor={this.keyExtractor} 
                showsVerticalScrollIndicator={false}
                renderItem={({item}) => <LeftItemsCell info={item} onPress={this.onPress.bind(this)}/>}
            />
        );
    }
}

const styles = StyleSheet.create({

})

export default LeftItemsComponent;   

import React, {PureComponent} from 'react';
import {View, StyleSheet, Text, TouchableWithoutFeedback} from 'react-native'
import color from '../../widget/color'
import screen from '../../common/screen'

class LeftItemsCell extends PureComponent{

    constructor(props){
        super(props) 
        this.state={
            clicked: false,
        }
    }

    componentWillReceiveProps(nextProps){
        this.setState({
            clicked: nextProps.info.clicked,
        })
    }

    render(){
        let item = this.props.info;
        let clickedStyle = this.state.clicked ? {backgroundColor: color.white} : {};
        return(
            <TouchableWithoutFeedback style={[styles.container, clickedStyle]} onPress={() => this.props.onPress(item)}>
                <View style={[styles.container, clickedStyle]}>
                    <Text style={styles.text}>{item.title}</Text>
                </View>
                
            </TouchableWithoutFeedback>
        )
    }
}

const styles = StyleSheet.create({
    container: {
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: color.deaultBackground,
        width: screen.width * 200 / 750,
        height: screen.width * 100 / 750,
    },
    text: {
        color: color.kindTextColor,
        fontSize: 12,
    }
});

export default LeftItemsCell;     

21. 关于FlatList中设置renderItem出现无法理解的错误！

    renderItem={({info}) => <LeftItemsCell info={info} onPress={this.onPress.bind(this)}/>}
    renderItem={({item}) => <LeftItemsCell info={item} onPress={this.onPress.bind(this)}/>}

    现在懂了，假如有一个对象， info,其中有属性 age, height。那么{age, height}=info,即为拿出其中对应的属性。
    而不是需要传统的 age=info.age, height=info.height

22.为什么FlatList在超出屏幕的部分无法滚动？

    首先你得搞清楚你所谓的不可滑动是哪种不可滑动。
        1.由于FlatList的父控件超出屏幕，例如有一个垂直布局，其中有两个子组件(1)Header (2)<View>FlatList<View>
        其中屏幕高600。Header高400，<View>高800。那么必然<View>会超出屏幕600。现在我们假设FlatList的有效内容高
        400，其中有200超出屏幕。此时滑动当然是“无法滚动的”，因为对于FlatList来讲，其实它的内容都是可视的，只不过超出了
        屏幕而已，但那也是“可视的”！所以才会滑不动。那么解决的方法就是设置<View>的高度为200，或者{flex:1}，这样你的
        FlatList就可以正常滑动了。
        2.其它原因暂时没遇到过。
23.设置{flex: 1}无效？？

    设置无效的原因通常是因为你没有设置父控件的高度引起的，父控件高度不确定，当然自控不知道自己到底应该占多大！

24.设置高度填充父控件无效？？

<ScrollView>
    <View style={styles.rightContainer}>
        <View style={{ flex: 1, backgroundColor: color.white }}>
            <Text>{this.state.rightContentTitle}</Text>
        </View>

    </View>
</ScrollView>

没有设置ScrollerView 的高度与大小，所以无效！！！
父，排列方式为‘row’
子 flex: 1
则子的高度默认为父控件的高度

25.
 let img = info.tagName && info.tagName.length !== 0 ? (
      <View style={styles.bottomImg}>
        <Text style={{color: color.white, fontSize: 12}}>{info.tagName}</Text>
      </View>) : null

vs 

 let img = info.tagName && info.tagName.length !== 0 && (
      <View style={styles.bottomImg}>
        <Text style={{color: color.white, fontSize: 12}}>{info.tagName}</Text>
      </View>)
为什么上面的可以，但是下面的不行？？

26.关于Android的返回键监听（从Fragment中监听返回键且要原生界面显示某些组件，恶心，搞的我恶心）

首先得明白我们的应用与一般的RN应用的区别
我们的应用的RN页面是嵌在Fragment中的，而Fragment无法监听返回键，只能由它的宿主Activity来监听，那么监听事件只能写在Activity中。
而一般的应用是直接继承ReactActivity的，它们可以直接监听，而且ReactActivity内部也封装好了这些方法（可以自己去阅读源码）。（这里还得
注意一下，ReactActivity中调用了在Application中实现的

 ReactInstanceManagerBuilder builder = ReactInstanceManager.builder()
      .setApplication(mApplication)
      .setJSMainModuleName(getJSMainModuleName())
      .setUseDeveloperSupport(getUseDeveloperSupport())
      .setRedBoxHandler(getRedBoxHandler())
      .setUIImplementationProvider(getUIImplementationProvider())
      .setInitialLifecycleState(LifecycleState.BEFORE_CREATE);

    for (ReactPackage reactPackage : getPackages()) {
      builder.addPackage(reactPackage);
    }

    String jsBundleFile = getJSBundleFile();
    if (jsBundleFile != null) {
      builder.setJSBundleFile(jsBundleFile);
    } else {
      builder.setBundleAssetName(Assertions.assertNotNull(getBundleAssetName()));
    }
    return builder.build();

    可以看到这里绑定了原生与RN的通信方法，而React-Native中文指导文档中实现的方法是无法实现与原生通信的，这里要稍微注意一下
    mReactInstanceManager = ((ReactApplication)getActivity().getApplication()).getReactNativeHost().getReactInstanceManager();
    所以这里我仿照了源码中实现的方法，然后就可以实现通信了，
    我上面应该介绍过
）
这里同样去阅读源码可以发现解决的方案
    public boolean onRNBackPressed() {
        if (((ReactApplication)getApplication()).getReactNativeHost().hasInstance()) {
            ((ReactApplication)getApplication()).getReactNativeHost().getReactInstanceManager().onBackPressed();
            return true;
        }
        return false;
    }

    @Override
    public void onBackPressedSupport() {

        if(!isRNBack || !onRNBackPressed()) {
            if (exitTime != 0 && System.currentTimeMillis() - exitTime < 2000) {
                super.onBackPressedSupport();
            } else {
                exitTime = System.currentTimeMillis();
                ToastHelper.showToast(this, getString(R.string.app_exit));
            }
        }
    }

    fragment中的返回方法什么也不需要做

这里是我实现的方法if(!isRNBack || !onRNBackPressed())用来保证退出到最外层的时候，把返回键的控制权交给原生应用

那相应的RN中的写法为这样
 1.。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。   
    const defaultStateAction = Navigator.router.getStateForAction  

    Navigator.router.getStateForAction = (action,state) => {  
        if(state && action.type === NavigationActions.BACK && state.routes.length === 2) {  
        let b =defaultStateAction(action,state);
        ControlBottomBar.show()
        return b  
     }  
        return defaultStateAction(action,state)  
    }; 

这是第一种方案，我采用的是这种方案。原因是我需要知道现在页面的具体位置，即到底是不是最外层。这样做的原因是应用的要求，因为我们需要控制底部的BottomBar
，所以我采用这种方案。
2.。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
componentDidMount () {
    this.syncImmediate()
    BackHandler.addEventListener('hardwareBackPress', this._onBackAndroid );  
  }

  componentUnWillMount(){  
    BackHandler.addEventListener('hardwareBackPress', this._onBackAndroid);  
   }  

  
   _onBackAndroid=()=>{  
     Navigator.router.getStateForAction
     let now = new Date().getTime();  
     return false 
   } 
   这种方案当不需要原生界面做出某种响应时适用。

这里需要注意的是，我之前理解的返回键监听是在每个页面上设置监听事件，但是这样的做法是错误的。同样只需要注册一次，
在根上设置监听就好了。貌似只要写了监听事件，不做任何多余的操作，自动执行页面返回。有时候也可以在某些需要监听的页面
上设置监听，但是这里需要注意的是。拿上面的方法_onBackAndroid()来举例.1.返回false，则继续执行父界面的BackHandler.addEventListener
2.返回true,则移除父界面的BackHandler.addEventListener，所以你会发现点击返回键无效的情况

以上就是本次Android返回键的处理方案。
总结：多看源码，多总结。为什么之前会每个页面都监听一次返回键？还不是因为看的少。特别需要注意的点就是ReactActivity与Fragment等中
嵌入RN的区别，有问题就去看源码，这在任何时候都是正确的。（read the fucking code, 太粗暴了。。。）
